type ManualReply = variant { Ok : nat; Err : text };
type ManualReply_1 = variant { Ok : text; Err : text };
type ManualReply_2 = variant { Ok : bool; Err : text };
type ManualReply_3 = variant { Ok : nat64; Err : text };
type Message = record {
  id : nat;
  active : bool;
  createdAt : nat64;
  addressRecepient : principal;
  addressRaiser : principal;
  expiry : nat64;
  totalAmountFunded : nat;
  amount : nat;
};
type _AzleResult = variant { Ok : Message; Err : text };
type _AzleResult_1 = variant { Ok : vec Message; Err : text };
type _AzleResult_2 = variant { Ok : nat; Err : text };
type addressPayload = record { address : text };
type donatePayload = record { id : nat; amount : nat };
type initFundPayload = record {
  duration : nat;
  addressRecepient : principal;
  amount : nat;
};
type queryPayload = record { id : nat };
type updateDurationPayload = record { id : nat; duration : nat };
type updateFeesPayload = record { newFees : nat };
type withdrawPayload = record { id : nat; transferAddress : text };
service : () -> {
  checkRaised : (queryPayload) -> (ManualReply);
  createNewFund : (initFundPayload) -> (_AzleResult);
  donate : (donatePayload) -> (ManualReply_1);
  getAddressToDeposit : () -> (text) query;
  getAllCanisters : () -> (_AzleResult_1) query;
  getFaucetTokens : () -> (ManualReply_2);
  initialise : (int8, text) -> ();
  initializeBalance : () -> (ManualReply_1);
  pauseFund : (queryPayload) -> (_AzleResult);
  restartFund : (queryPayload) -> (_AzleResult);
  updateDuration : (updateDurationPayload) -> (_AzleResult);
  updateFees : (updateFeesPayload) -> (_AzleResult_2);
  walletBalance : (addressPayload) -> (ManualReply_3);
  withdrawFund : (withdrawPayload) -> (ManualReply_1);
}